/*
Coinbase Advanced Trading API

OpenAPI 3.x specification for Coinbase Adavanced Trading

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

// PreviewFailureReason the model 'PreviewFailureReason'
type PreviewFailureReason string

// List of PreviewFailureReason
const (
	UNKNOWN_PREVIEW_FAILURE_REASON PreviewFailureReason = "UNKNOWN_PREVIEW_FAILURE_REASON"
	PREVIEW_MISSING_COMMISSION_RATE PreviewFailureReason = "PREVIEW_MISSING_COMMISSION_RATE"
	PREVIEW_INVALID_SIDE PreviewFailureReason = "PREVIEW_INVALID_SIDE"
	PREVIEW_INVALID_ORDER_CONFIG PreviewFailureReason = "PREVIEW_INVALID_ORDER_CONFIG"
	PREVIEW_INVALID_PRODUCT_ID PreviewFailureReason = "PREVIEW_INVALID_PRODUCT_ID"
	PREVIEW_INVALID_SIZE_PRECISION PreviewFailureReason = "PREVIEW_INVALID_SIZE_PRECISION"
	PREVIEW_INVALID_PRICE_PRECISION PreviewFailureReason = "PREVIEW_INVALID_PRICE_PRECISION"
	PREVIEW_MISSING_PRODUCT_PRICE_BOOK PreviewFailureReason = "PREVIEW_MISSING_PRODUCT_PRICE_BOOK"
	PREVIEW_INVALID_LEDGER_BALANCE PreviewFailureReason = "PREVIEW_INVALID_LEDGER_BALANCE"
	PREVIEW_INSUFFICIENT_LEDGER_BALANCE PreviewFailureReason = "PREVIEW_INSUFFICIENT_LEDGER_BALANCE"
	PREVIEW_INVALID_LIMIT_PRICE_POST_ONLY PreviewFailureReason = "PREVIEW_INVALID_LIMIT_PRICE_POST_ONLY"
	PREVIEW_INVALID_LIMIT_PRICE PreviewFailureReason = "PREVIEW_INVALID_LIMIT_PRICE"
	PREVIEW_INVALID_NO_LIQUIDITY PreviewFailureReason = "PREVIEW_INVALID_NO_LIQUIDITY"
	PREVIEW_INSUFFICIENT_FUND PreviewFailureReason = "PREVIEW_INSUFFICIENT_FUND"
	PREVIEW_INVALID_COMMISSION_CONFIGURATION PreviewFailureReason = "PREVIEW_INVALID_COMMISSION_CONFIGURATION"
	PREVIEW_INVALID_STOP_PRICE PreviewFailureReason = "PREVIEW_INVALID_STOP_PRICE"
	PREVIEW_INVALID_BASE_SIZE_TOO_LARGE PreviewFailureReason = "PREVIEW_INVALID_BASE_SIZE_TOO_LARGE"
	PREVIEW_INVALID_BASE_SIZE_TOO_SMALL PreviewFailureReason = "PREVIEW_INVALID_BASE_SIZE_TOO_SMALL"
	PREVIEW_INVALID_QUOTE_SIZE_PRECISION PreviewFailureReason = "PREVIEW_INVALID_QUOTE_SIZE_PRECISION"
	PREVIEW_INVALID_QUOTE_SIZE_TOO_LARGE PreviewFailureReason = "PREVIEW_INVALID_QUOTE_SIZE_TOO_LARGE"
	PREVIEW_INVALID_PRICE_TOO_LARGE PreviewFailureReason = "PREVIEW_INVALID_PRICE_TOO_LARGE"
	PREVIEW_INVALID_QUOTE_SIZE_TOO_SMALL PreviewFailureReason = "PREVIEW_INVALID_QUOTE_SIZE_TOO_SMALL"
	PREVIEW_BREACHED_PRICE_LIMIT PreviewFailureReason = "PREVIEW_BREACHED_PRICE_LIMIT"
	PREVIEW_BREACHED_ACCOUNT_POSITION_LIMIT PreviewFailureReason = "PREVIEW_BREACHED_ACCOUNT_POSITION_LIMIT"
	PREVIEW_BREACHED_COMPANY_POSITION_LIMIT PreviewFailureReason = "PREVIEW_BREACHED_COMPANY_POSITION_LIMIT"
	PREVIEW_INVALID_MARGIN_HEALTH PreviewFailureReason = "PREVIEW_INVALID_MARGIN_HEALTH"
	PREVIEW_RISK_PROXY_FAILURE PreviewFailureReason = "PREVIEW_RISK_PROXY_FAILURE"
)

// All allowed values of PreviewFailureReason enum
var AllowedPreviewFailureReasonEnumValues = []PreviewFailureReason{
	"UNKNOWN_PREVIEW_FAILURE_REASON",
	"PREVIEW_MISSING_COMMISSION_RATE",
	"PREVIEW_INVALID_SIDE",
	"PREVIEW_INVALID_ORDER_CONFIG",
	"PREVIEW_INVALID_PRODUCT_ID",
	"PREVIEW_INVALID_SIZE_PRECISION",
	"PREVIEW_INVALID_PRICE_PRECISION",
	"PREVIEW_MISSING_PRODUCT_PRICE_BOOK",
	"PREVIEW_INVALID_LEDGER_BALANCE",
	"PREVIEW_INSUFFICIENT_LEDGER_BALANCE",
	"PREVIEW_INVALID_LIMIT_PRICE_POST_ONLY",
	"PREVIEW_INVALID_LIMIT_PRICE",
	"PREVIEW_INVALID_NO_LIQUIDITY",
	"PREVIEW_INSUFFICIENT_FUND",
	"PREVIEW_INVALID_COMMISSION_CONFIGURATION",
	"PREVIEW_INVALID_STOP_PRICE",
	"PREVIEW_INVALID_BASE_SIZE_TOO_LARGE",
	"PREVIEW_INVALID_BASE_SIZE_TOO_SMALL",
	"PREVIEW_INVALID_QUOTE_SIZE_PRECISION",
	"PREVIEW_INVALID_QUOTE_SIZE_TOO_LARGE",
	"PREVIEW_INVALID_PRICE_TOO_LARGE",
	"PREVIEW_INVALID_QUOTE_SIZE_TOO_SMALL",
	"PREVIEW_BREACHED_PRICE_LIMIT",
	"PREVIEW_BREACHED_ACCOUNT_POSITION_LIMIT",
	"PREVIEW_BREACHED_COMPANY_POSITION_LIMIT",
	"PREVIEW_INVALID_MARGIN_HEALTH",
	"PREVIEW_RISK_PROXY_FAILURE",
}

func (v *PreviewFailureReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PreviewFailureReason(value)
	for _, existing := range AllowedPreviewFailureReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PreviewFailureReason", value)
}

// NewPreviewFailureReasonFromValue returns a pointer to a valid PreviewFailureReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPreviewFailureReasonFromValue(v string) (*PreviewFailureReason, error) {
	ev := PreviewFailureReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PreviewFailureReason: valid values are %v", v, AllowedPreviewFailureReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PreviewFailureReason) IsValid() bool {
	for _, existing := range AllowedPreviewFailureReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PreviewFailureReason value
func (v PreviewFailureReason) Ptr() *PreviewFailureReason {
	return &v
}

type NullablePreviewFailureReason struct {
	value *PreviewFailureReason
	isSet bool
}

func (v NullablePreviewFailureReason) Get() *PreviewFailureReason {
	return v.value
}

func (v *NullablePreviewFailureReason) Set(val *PreviewFailureReason) {
	v.value = val
	v.isSet = true
}

func (v NullablePreviewFailureReason) IsSet() bool {
	return v.isSet
}

func (v *NullablePreviewFailureReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreviewFailureReason(val *PreviewFailureReason) *NullablePreviewFailureReason {
	return &NullablePreviewFailureReason{value: val, isSet: true}
}

func (v NullablePreviewFailureReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreviewFailureReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

