/*
Coinbase Advanced Trading API

OpenAPI 3.x specification for Coinbase Adavanced Trading

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

// StopDirection the model 'StopDirection'
type StopDirection string

// List of StopDirection
const (
	UNKNOWN_STOP_DIRECTION StopDirection = "UNKNOWN_STOP_DIRECTION"
	STOP_DIRECTION_STOP_UP StopDirection = "STOP_DIRECTION_STOP_UP"
	STOP_DIRECTION_STOP_DOWN StopDirection = "STOP_DIRECTION_STOP_DOWN"
)

// All allowed values of StopDirection enum
var AllowedStopDirectionEnumValues = []StopDirection{
	"UNKNOWN_STOP_DIRECTION",
	"STOP_DIRECTION_STOP_UP",
	"STOP_DIRECTION_STOP_DOWN",
}

func (v *StopDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StopDirection(value)
	for _, existing := range AllowedStopDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StopDirection", value)
}

// NewStopDirectionFromValue returns a pointer to a valid StopDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStopDirectionFromValue(v string) (*StopDirection, error) {
	ev := StopDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StopDirection: valid values are %v", v, AllowedStopDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StopDirection) IsValid() bool {
	for _, existing := range AllowedStopDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StopDirection value
func (v StopDirection) Ptr() *StopDirection {
	return &v
}

type NullableStopDirection struct {
	value *StopDirection
	isSet bool
}

func (v NullableStopDirection) Get() *StopDirection {
	return v.value
}

func (v *NullableStopDirection) Set(val *StopDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableStopDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableStopDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopDirection(val *StopDirection) *NullableStopDirection {
	return &NullableStopDirection{value: val, isSet: true}
}

func (v NullableStopDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

