/*
Coinbase Advanced Trading API

OpenAPI 3.x specification for Coinbase Adavanced Trading

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

// FailureReason the model 'FailureReason'
type FailureReason string

// List of FailureReason
const (
	UNKNOWN_FAILURE_REASON FailureReason = "UNKNOWN_FAILURE_REASON"
	UNSUPPORTED_ORDER_CONFIGURATION FailureReason = "UNSUPPORTED_ORDER_CONFIGURATION"
	INVALID_SIDE FailureReason = "INVALID_SIDE"
	INVALID_PRODUCT_ID FailureReason = "INVALID_PRODUCT_ID"
	INVALID_SIZE_PRECISION FailureReason = "INVALID_SIZE_PRECISION"
	INVALID_PRICE_PRECISION FailureReason = "INVALID_PRICE_PRECISION"
	INSUFFICIENT_FUND FailureReason = "INSUFFICIENT_FUND"
	INVALID_LEDGER_BALANCE FailureReason = "INVALID_LEDGER_BALANCE"
	ORDER_ENTRY_DISABLED FailureReason = "ORDER_ENTRY_DISABLED"
	INELIGIBLE_PAIR FailureReason = "INELIGIBLE_PAIR"
	INVALID_LIMIT_PRICE_POST_ONLY FailureReason = "INVALID_LIMIT_PRICE_POST_ONLY"
	INVALID_LIMIT_PRICE FailureReason = "INVALID_LIMIT_PRICE"
	INVALID_NO_LIQUIDITY FailureReason = "INVALID_NO_LIQUIDITY"
	INVALID_REQUEST FailureReason = "INVALID_REQUEST"
	COMMANDER_REJECTED_NEW_ORDER FailureReason = "COMMANDER_REJECTED_NEW_ORDER"
	INSUFFICIENT_FUNDS FailureReason = "INSUFFICIENT_FUNDS"
)

// All allowed values of FailureReason enum
var AllowedFailureReasonEnumValues = []FailureReason{
	"UNKNOWN_FAILURE_REASON",
	"UNSUPPORTED_ORDER_CONFIGURATION",
	"INVALID_SIDE",
	"INVALID_PRODUCT_ID",
	"INVALID_SIZE_PRECISION",
	"INVALID_PRICE_PRECISION",
	"INSUFFICIENT_FUND",
	"INVALID_LEDGER_BALANCE",
	"ORDER_ENTRY_DISABLED",
	"INELIGIBLE_PAIR",
	"INVALID_LIMIT_PRICE_POST_ONLY",
	"INVALID_LIMIT_PRICE",
	"INVALID_NO_LIQUIDITY",
	"INVALID_REQUEST",
	"COMMANDER_REJECTED_NEW_ORDER",
	"INSUFFICIENT_FUNDS",
}

func (v *FailureReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FailureReason(value)
	for _, existing := range AllowedFailureReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FailureReason", value)
}

// NewFailureReasonFromValue returns a pointer to a valid FailureReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFailureReasonFromValue(v string) (*FailureReason, error) {
	ev := FailureReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FailureReason: valid values are %v", v, AllowedFailureReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FailureReason) IsValid() bool {
	for _, existing := range AllowedFailureReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FailureReason value
func (v FailureReason) Ptr() *FailureReason {
	return &v
}

type NullableFailureReason struct {
	value *FailureReason
	isSet bool
}

func (v NullableFailureReason) Get() *FailureReason {
	return v.value
}

func (v *NullableFailureReason) Set(val *FailureReason) {
	v.value = val
	v.isSet = true
}

func (v NullableFailureReason) IsSet() bool {
	return v.isSet
}

func (v *NullableFailureReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailureReason(val *FailureReason) *NullableFailureReason {
	return &NullableFailureReason{value: val, isSet: true}
}

func (v NullableFailureReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailureReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

