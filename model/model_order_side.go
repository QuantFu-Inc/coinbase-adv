/*
Coinbase Advanced Trading API

OpenAPI 3.x specification for Coinbase Adavanced Trading

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

// OrderSide the model 'OrderSide'
type OrderSide string

// List of OrderSide
const (
	UNKNOWN_ORDER_SIDE OrderSide = "UNKNOWN_ORDER_SIDE"
	BUY OrderSide = "BUY"
	SELL OrderSide = "SELL"
)

// All allowed values of OrderSide enum
var AllowedOrderSideEnumValues = []OrderSide{
	"UNKNOWN_ORDER_SIDE",
	"BUY",
	"SELL",
}

func (v *OrderSide) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderSide(value)
	for _, existing := range AllowedOrderSideEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderSide", value)
}

// NewOrderSideFromValue returns a pointer to a valid OrderSide
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderSideFromValue(v string) (*OrderSide, error) {
	ev := OrderSide(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderSide: valid values are %v", v, AllowedOrderSideEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderSide) IsValid() bool {
	for _, existing := range AllowedOrderSideEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderSide value
func (v OrderSide) Ptr() *OrderSide {
	return &v
}

type NullableOrderSide struct {
	value *OrderSide
	isSet bool
}

func (v NullableOrderSide) Get() *OrderSide {
	return v.value
}

func (v *NullableOrderSide) Set(val *OrderSide) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderSide) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderSide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderSide(val *OrderSide) *NullableOrderSide {
	return &NullableOrderSide{value: val, isSet: true}
}

func (v NullableOrderSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderSide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

