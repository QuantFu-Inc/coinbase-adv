/*
Coinbase Advanced Trading API

OpenAPI 3.x specification for Coinbase Adavanced Trading

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// GetPriceResponse struct for GetPriceResponse
type GetPriceResponse struct {
	Data *GetPriceResponseData `json:"data,omitempty"`
}

// NewGetPriceResponse instantiates a new GetPriceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPriceResponse() *GetPriceResponse {
	this := GetPriceResponse{}
	return &this
}

// NewGetPriceResponseWithDefaults instantiates a new GetPriceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPriceResponseWithDefaults() *GetPriceResponse {
	this := GetPriceResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetPriceResponse) GetData() GetPriceResponseData {
	if o == nil || isNil(o.Data) {
		var ret GetPriceResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPriceResponse) GetDataOk() (*GetPriceResponseData, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetPriceResponse) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given GetPriceResponseData and assigns it to the Data field.
func (o *GetPriceResponse) SetData(v GetPriceResponseData) {
	o.Data = &v
}

func (o GetPriceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableGetPriceResponse struct {
	value *GetPriceResponse
	isSet bool
}

func (v NullableGetPriceResponse) Get() *GetPriceResponse {
	return v.value
}

func (v *NullableGetPriceResponse) Set(val *GetPriceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPriceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPriceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPriceResponse(val *GetPriceResponse) *NullableGetPriceResponse {
	return &NullableGetPriceResponse{value: val, isSet: true}
}

func (v NullableGetPriceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPriceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


