/*
Coinbase Advanced Trading API

OpenAPI 3.x specification for Coinbase Adavanced Trading

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// CreateOrderResponse struct for CreateOrderResponse
type CreateOrderResponse struct {
	Success *bool `json:"success,omitempty"`
	FailureReason *string `json:"failure_reason,omitempty"`
	OrderId *string `json:"order_id,omitempty"`
	SuccessResponse *CreateOrderResponseSuccessResponse `json:"success_response,omitempty"`
	ErrorResponse *CreateOrderResponseErrorResponse `json:"error_response,omitempty"`
	OrderConfiguration *OutputOrderConfiguration `json:"order_configuration,omitempty"`
}

// NewCreateOrderResponse instantiates a new CreateOrderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrderResponse() *CreateOrderResponse {
	this := CreateOrderResponse{}
	return &this
}

// NewCreateOrderResponseWithDefaults instantiates a new CreateOrderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrderResponseWithDefaults() *CreateOrderResponse {
	this := CreateOrderResponse{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *CreateOrderResponse) GetSuccess() bool {
	if o == nil || isNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrderResponse) GetSuccessOk() (*bool, bool) {
	if o == nil || isNil(o.Success) {
    return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *CreateOrderResponse) HasSuccess() bool {
	if o != nil && !isNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *CreateOrderResponse) SetSuccess(v bool) {
	o.Success = &v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *CreateOrderResponse) GetFailureReason() string {
	if o == nil || isNil(o.FailureReason) {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrderResponse) GetFailureReasonOk() (*string, bool) {
	if o == nil || isNil(o.FailureReason) {
    return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *CreateOrderResponse) HasFailureReason() bool {
	if o != nil && !isNil(o.FailureReason) {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *CreateOrderResponse) SetFailureReason(v string) {
	o.FailureReason = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *CreateOrderResponse) GetOrderId() string {
	if o == nil || isNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrderResponse) GetOrderIdOk() (*string, bool) {
	if o == nil || isNil(o.OrderId) {
    return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *CreateOrderResponse) HasOrderId() bool {
	if o != nil && !isNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *CreateOrderResponse) SetOrderId(v string) {
	o.OrderId = &v
}

// GetSuccessResponse returns the SuccessResponse field value if set, zero value otherwise.
func (o *CreateOrderResponse) GetSuccessResponse() CreateOrderResponseSuccessResponse {
	if o == nil || isNil(o.SuccessResponse) {
		var ret CreateOrderResponseSuccessResponse
		return ret
	}
	return *o.SuccessResponse
}

// GetSuccessResponseOk returns a tuple with the SuccessResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrderResponse) GetSuccessResponseOk() (*CreateOrderResponseSuccessResponse, bool) {
	if o == nil || isNil(o.SuccessResponse) {
    return nil, false
	}
	return o.SuccessResponse, true
}

// HasSuccessResponse returns a boolean if a field has been set.
func (o *CreateOrderResponse) HasSuccessResponse() bool {
	if o != nil && !isNil(o.SuccessResponse) {
		return true
	}

	return false
}

// SetSuccessResponse gets a reference to the given CreateOrderResponseSuccessResponse and assigns it to the SuccessResponse field.
func (o *CreateOrderResponse) SetSuccessResponse(v CreateOrderResponseSuccessResponse) {
	o.SuccessResponse = &v
}

// GetErrorResponse returns the ErrorResponse field value if set, zero value otherwise.
func (o *CreateOrderResponse) GetErrorResponse() CreateOrderResponseErrorResponse {
	if o == nil || isNil(o.ErrorResponse) {
		var ret CreateOrderResponseErrorResponse
		return ret
	}
	return *o.ErrorResponse
}

// GetErrorResponseOk returns a tuple with the ErrorResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrderResponse) GetErrorResponseOk() (*CreateOrderResponseErrorResponse, bool) {
	if o == nil || isNil(o.ErrorResponse) {
    return nil, false
	}
	return o.ErrorResponse, true
}

// HasErrorResponse returns a boolean if a field has been set.
func (o *CreateOrderResponse) HasErrorResponse() bool {
	if o != nil && !isNil(o.ErrorResponse) {
		return true
	}

	return false
}

// SetErrorResponse gets a reference to the given CreateOrderResponseErrorResponse and assigns it to the ErrorResponse field.
func (o *CreateOrderResponse) SetErrorResponse(v CreateOrderResponseErrorResponse) {
	o.ErrorResponse = &v
}

// GetOrderConfiguration returns the OrderConfiguration field value if set, zero value otherwise.
func (o *CreateOrderResponse) GetOrderConfiguration() OutputOrderConfiguration {
	if o == nil || isNil(o.OrderConfiguration) {
		var ret OutputOrderConfiguration
		return ret
	}
	return *o.OrderConfiguration
}

// GetOrderConfigurationOk returns a tuple with the OrderConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrderResponse) GetOrderConfigurationOk() (*OutputOrderConfiguration, bool) {
	if o == nil || isNil(o.OrderConfiguration) {
    return nil, false
	}
	return o.OrderConfiguration, true
}

// HasOrderConfiguration returns a boolean if a field has been set.
func (o *CreateOrderResponse) HasOrderConfiguration() bool {
	if o != nil && !isNil(o.OrderConfiguration) {
		return true
	}

	return false
}

// SetOrderConfiguration gets a reference to the given OutputOrderConfiguration and assigns it to the OrderConfiguration field.
func (o *CreateOrderResponse) SetOrderConfiguration(v OutputOrderConfiguration) {
	o.OrderConfiguration = &v
}

func (o CreateOrderResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !isNil(o.FailureReason) {
		toSerialize["failure_reason"] = o.FailureReason
	}
	if !isNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if !isNil(o.SuccessResponse) {
		toSerialize["success_response"] = o.SuccessResponse
	}
	if !isNil(o.ErrorResponse) {
		toSerialize["error_response"] = o.ErrorResponse
	}
	if !isNil(o.OrderConfiguration) {
		toSerialize["order_configuration"] = o.OrderConfiguration
	}
	return json.Marshal(toSerialize)
}

type NullableCreateOrderResponse struct {
	value *CreateOrderResponse
	isSet bool
}

func (v NullableCreateOrderResponse) Get() *CreateOrderResponse {
	return v.value
}

func (v *NullableCreateOrderResponse) Set(val *CreateOrderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrderResponse(val *CreateOrderResponse) *NullableCreateOrderResponse {
	return &NullableCreateOrderResponse{value: val, isSet: true}
}

func (v NullableCreateOrderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


